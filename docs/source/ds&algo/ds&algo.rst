===============
자료구조와 알고리즘
===============

자료구조
======

자료구조는 데이터를 나타내는 방법이다. 기본적으로 제공하는 데이터 타입에는 문자열 (str), 리스트 (list), 사전 (dict), 순서쌍 (tuple), 집합 (set) 등이 있다.

* 문자열: 'This is a string.'
* 리스트: [1, 2, 3, 4]
* 사전: {'a': 6, 'b': 'text'}

기본 데이터 타입이 존재함에도 자료구조를 사용해야 하는 이유는 무엇일까?

기본적으로 제공하는 데이터 타입으로 표현하여 해결할 수 없는 문제의 경우, 자료구조를 사용하면 해결할 수 있다. 예를 들어 최대값을 구하는 함수 max는 리스트를 활용하여 최대값을 찾는다. 하지만 그 자료 수가 많아지면 굉장히 오래 걸리기 때문에 다른 방법이 필요하다

문제 해결을 위한 다양한 자료구조들이 있으며, 그 목록은 다음과 같다.

.. toctree::
    :maxdepth: 1

    linear_array
    stack
    queue
    heap
    hash
    set


알고리즘
======

알고리즘은 다음과 같이 정의할 수 있다.

* 사전적 정의: 어떤 문제를 해결하기 위한 절차, 방법, 명령어들의 집합
* 프로그래밍: 주어진 문제의 해결을 위한 자료구조와 연산 방법에 대한 선택

문제마다 사용할 수 있는 알고리즘이 다르며, 그 목록은 다음과 같다.

.. toctree::
    :maxdepth: 1

    sort&search
    recursive_algo
    complexity


프로그래밍 문제
============

자료구조와 알고리즘에 대한 이해를 기반으로 다양한 문제를 실제로 적용해 봄으로써 다양한 문제 상황에서 어떤 자료구조와 알고리즘을 사용해야 하는지에 대한 이해를 높이고자 한다. 프로그래밍 문제를 풀 수 있는 사이트는 다양하다. 여기서는 백준과 프로그래머스라는 사이트에서 제공하는 문제와 그에 대한 해결책을 보이고자 한다.

프로그래밍 문제 공부는 주로 자료구조와 알고리즘을 기반으로 진행한다. 그 순서는 아래와 같다.

.. _pr_test_prep_process:

문제 풀이 순서
************

우선, 기본적인 자료 구조와 관련된 문제를 먼저 풀고, 탐색고 같은 알고리즘 관련 문제를 푸는 것이 좋을 것 같다. 아래 내용이 가장 기본적인 프로그래밍 문제 푸는 순서라고 생각한다.

* 자료구조

    * Stack → Queue → Heap → Hash → Set

* 알고리즘

    * Search → Sort → Dynamic programming → Backtracking

위 과정을 한 번 진행한 후에는 조금 더 세부적인 내용을 하는 것이 좋을 것 같다.

* 자료구조

    * Disjoint set

* 알고리즘

    * 작성 예정


위 과정을 통해 실제 문제를 풀었고 그 내용을 아래에서 확인할 수 있다. 보다 상세한 내용은 `Github (hwkim89 > programming) <https://github.com/hwkim89/programming>`_ 에서 확인할 수 있다.


자료구조
*******

.. toctree::
    :maxdepth: 1

    problems/queue
    problems/heap
    problems/hash

알고리즘
*******

.. toctree::
    :maxdepth: 1

    problems/greedy
    problems/sort
    problems/dynamic_pr
    problems/dfs_bfs
    problems/others


그리고 추가적으로 프로그래밍 테스트 준비할 때 그 순서를 어떻게 할 지 고민이 많았다. 그래서 그 순서를 한 번 정리했고 여기에서 확인할 수 있다.

문제를 풀이 요령
**************

-----
Tip
-----

* 런타임 에러가 나는 경우, try-except 문으로 어디서 나는지 확인할 수 있다.

* 범위를 제한해야 하는 경우 일반적으로 생각하는 부등식으로 표현할 수 있다.

    * -1 < i < 10

* 시간복잡도를 계산하면서 문제를 풀면, 시간초과 문제를 해결할 수 있다.

* 새로운 변수를 새로 만들어서 하기보다 기존 변수를 변경해서 문제를 해결하고자 하면 시간초과를 막을 수 있다.


-------
주의사항
-------

* 제한사항을 항상 잘 읽고 유의하기
* 문제를 이해하고 한 번에 푸는 것이 아니라 문제 해결에 필요한 하나하나의 단계로 해법을 표현해야 한다.

-----
의문점
-----

* 추가 테스트 케이스를 사용하여 문제를 해결하는 경우가 있는지 여부


참조
====

* `어서와! 자료구조와 알고리즘은 처음이지? <https://programmers.co.kr/learn/courses/57>`_
* `Programmers challenges <https://programmers.co.kr/learn/challenges>`_
