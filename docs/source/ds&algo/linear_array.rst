=======================
선형 배열 (Linear array)
=======================

배열
====

배열은 원소들을 순서대로 늘어놓은 것이다. Python에서 배열은 타입과 관계없이 모든 값들을 저장할 수 있다.

.. figure:: img/list/list.png
    :align: center
    :scale: 40%

위 배열은 Python에서 L = ['Bob', 'Cat', 'Spam', 'Programmers']와 같이 표현할 수 있다.


리스트 연산
*********

-----------------------
원소 덧붙이기, 끝에서 꺼내기
-----------------------

.. code-block:: python

    L = ['Bob', 'Cat', 'Spam', 'Programmers']
    L.append('New')
    L.pop() # 끝에서 하나의 원소를 꺼냄 (리스트도 변화)

위와 같이 간단한 연산은 리스트의 길이와 관계없이 상수 시간이 소요된다. 시간 복잡도로 표현하면 O(1)로 나타낼 수 있다.

---------------
원소 삽입/삭제하기
---------------

.. code-block:: python

    L = [20, 37, 58, 72, 91]
    L.insert(3, 65)
    del(L[2])
    L.pop(2)

del과 pop의 차이점은 del은 삭제한 항목을 출력하지 않지만, pop은 출력한다는 점이다.

그리고 이번 연산은 리스트의 길이가 길면 오래 걸리고, 연산 시간은 리스트의 길이에 비례한다 (선형 시간). 시간 복잡도로 표현하면 O(n)으로 나타낼 수 있다.

----------
원소 탐색하기
----------

.. code-block:: python

    L = ['Bob', 'Cat', 'Spam', 'Programmers']
    L.index('Spam')

--------
연습 문제
--------

* 정렬된 리스트에 주어진 원소 삽입하기

    * 문제 설명

    .. code-block:: text

        리스트 L 과 정수 x 가 인자로 주어질 때, 리스트 내의 올바른 위치에 x 를 삽입하여 그 결과 리스트를 반환하는 함수 solution 을 완성하세요.

        인자로 주어지는 리스트 L 은 정수 원소들로 이루어져 있으며 크기에 따라 (오름차순으로) 정렬되어 있다고 가정합니다.

        예를 들어, L = [20, 37, 58, 72, 91] 이고 x = 65 인 경우, 올바른 리턴 값은 [20, 37, 58, 65, 72, 91] 입니다.

        힌트: 순환문을 이용하여 올바른 위치를 결정하고 insert() 메서드를 이용하여 삽입하는 것이 한 가지 방법입니다.

        주의: 리스트 내에 존재하는 모든 원소들보다 작거나 모든 원소들보다 큰 정수가 주어지는 경우에 대해서도 올바르게 처리해야 합니다.

    * 코드

    .. code-block:: python

        def solution(L, x):
            for i, e in enumerate(L):
                if e > x:
                    L.insert(i, x)
                    return L
                
            L.append(x)
            return L

* 주어진 리스트에서 특정 원소를 모두 찾아내라 (중복 존재 가능)

    * 문제 설명

    .. code-block:: text

        인자로 주어지는 리스트 L 내에서, 또한 인자로 주어지는 원소 x 가 발견되는 모든 인덱스를 구하여 이 인덱스들로 이루어진 리스트를 반환하는 함수 solution 을 완성하세요.

        리스트 L 은 정수들로 이루어져 있고 그 순서는 임의로 부여되어 있다고 가정하며, 동일한 원소가 반복하여 들어 있을 수 있습니다. 이 안에 정수 x 가 존재하면 그것들을 모두 발견하여 해당 인덱스들을 리스트로 만들어 반환하고, 만약 존재하지 않으면 하나의 원소로 이루어진 리스트 [-1] 를 반환하는 함수를 완성하세요.

        예를 들어, L = [64, 72, 83, 72, 54] 이고 x = 72 인 경우의 올바른 리턴 값은 [1, 3] 입니다.
        또 다른 예를 들어, L = [64, 72, 83, 72, 54] 이고 x = 83 인 경우의 올바른 리턴 값은 [2] 입니다.
        마지막으로 또 다른 예를 들어, L = [64, 72, 83, 72, 54] 이고 x = 49 인 경우의 올바른 리턴 값은 [-1] 입니다.

        힌트 1: 리스트의 index() 메서드와 리스트 슬라이싱을 활용하는 것이 한 가지 방법이 됩니다. 리스트 슬라이싱은 아래와 같이 동작합니다.

        L = [6, 2, 8, 7, 3] 인 경우
        
        * L[1:3] = [2, 8]
        * L[2:] = [8, 7, 3]
        * L[:3] = [6, 2, 8]

        힌트 2: 리스트의 index() 메서드는, 인자로 주어지는 원소가 리스트 내에 존재하지 않을 때 ValueError 를 일으킵니다. 이것을 try ... except 로 처리해도 되고, if x in L 과 같은 조건문으로 특정 원소가 리스트 내에 존재하는지를 판단해도 됩니다.

    * 코드

    .. code-block:: python

        def solution(L, x):
            if x not in L: return [-1]
            
            indexes = []
            while x in L:
                index = L.index(x)
                if indexes:
                    indexes.append(indexes[-1] + index + 1)
                else:
                    indexes.append(index)
                    
                L = L[index+1:]
                
            return indexes


참조
====

* https://programmers.co.kr/learn/courses/57
