================
Greedy algorithm
================

탐욕법 (Greedy algorithm)은 알고리즘의 각 단계에서 그 순간에 최적이라고 생각되는 것을 선택하는 방법을 말한다.

탐욕법으로 최적해를 찾을 수 있는 문제는 현재의 선택이 마지막 해답의 최적성을 해치지 않는 경우에 사용 가능하다 (= 지금 좋은 게 최종적으로 좋은 것이다).


체육복
=====

* 문제

    * `Programmers > 코딩테스트 연습 > 탐욕법 (Greedy) > 체육복 <https://programmers.co.kr/learn/courses/30/lessons/42862>`_

* 빌려준 학생들을 "정해진 순서로"로 살펴야 하고, 이 "정해진 순서에"에 따라 우선하여 빌려줄 방향을 정해야 함

* 해결법

    * 방법 1

        * 학생의 수는 기껏해야 30명이므로, 학생 수만큼 배열을 확보하고 여기에 각자가 가지고 있는 체육복의 수를 기록한다.
        * 그리고 번호 순서대로 "스캔"하면서 빌려줄 관계를 정한다.

    * 방법 2

        * 만약 전체 학생 수가 매우 크더라도 :math:`O(n)` 보다 낮은 복잡도 알고리즘을 어려워 보임
        * 그런데 여벌의 체육복을 가져온 학생이 매우 적다면, 방법 1로 했을 때 여벌도 없는데 모든 학생이 여벌을 빌릴 수 있는지 확인해야 함
        * 여벌의 체육복을 가져온 학생들의 번호 (reserve)를 정렬하고, 이것을 하나하나 순서대로 살펴보면서 빌려줄 수 있는 다른 학생을 찾아 처리하면 효율을 높일 수 있다.

* 코드

    * `Github <https://github.com/hwkim89/programmers/blob/master/greedy/gym_suit.ipynb>`_


큰 수 만들기
==========

* 문제

    * `Programmers > 코딩테스트 연습 > 탐욕법 (Greedy) > 큰 수 만들기 <https://programmers.co.kr/learn/courses/30/lessons/42883>`_

* 원칙

    * 앞 자리에 큰 수가 오는 것이 전체를 크게 만든다 → 즉, 큰 것을 우선해서 골라 담고 싶다.

* 해결법

    * 앞 자리에서부터 하나씩 골라서 담되, 지금 담으려는 것보다 작은 것들은 도로 뺀다!!
    * 단, 뺄 수 있는 수효에 도달할 때까지만.
    * 결론적으로 큰 수가 앞 자리에, 작은 수가 뒷 자리에 놓이도록 만드는 것이며 제약조건은 뺄 수 있는 것의 개수이다.
    * 주의할 점은 모든 수를 다 담고 나서 뺄 수 있는 것의 개수가 남아 있는 경우 최종 수의 뒤에서부터 남아 있는 뺄 것의 개수를 제거하는 것이다.

* 구현

    * 주어진 숫자 (number)로부터 하나씩 꺼내어 모으되,

        * 이미 모아둔 것 중 지금 등장한 것보다 작은 것들을 빼낸다.

    * 이렇게 모은 숫자들을 자릿수에 맞추어 반환한다.

        * 아직 뺄 개수 (k)를 채우지 못한 경우

* 접근법에 대한 고찰

    * 탐욕법 (Greedy algorithm)은 앞 단계에서의 선택 (앞 자리에서 큰 수)이 이후 단계에서의 동작에 의한 해의 최적성 (Optimality)에 영향을 주지 않음

* 코드

    * `Github <https://github.com/hwkim89/programmers/blob/master/greedy/creating_big_number.ipynb>`_
